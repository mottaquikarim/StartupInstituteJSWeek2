{"home":{"content":"# SI JavaScript: Week2\n---\n\nHello, Wrold! Welcome to class. Please find today's class plan and lecture notes below.\n\n#### Learning Objectives\n---\n\n1. Understand control flow in javascript\n2. Learn about various **statement types** in javascript and how they can be used to achieve control flow\n\n#### Rundown\n---\n\n#### [Getting Started](#getting-started)\n#### [Warmup](#warmup)\n#### [Functions](#functions)\n#### [Conditional Statements](#conditional-statements)\n#### [Loops](#loops)\n","idx":0},"title":{"content":"SI: Week 2","idx":1},"desc":{"content":"A deep dive into javascript functions, conditional statements, and control flow","idx":2},"getting-started":{"content":"# Getting Started\n---\n\nSince the bulk of our time will be spent on javascript, **specifically** javascript logic, we will use a **[tool](http://samantha.fewd.us/)** that makes it easier to write and test our code quickly.\n\n#### How to get started with **[Samantha](http://samantha.fewd.us/)**\n---\n\n1. Get a **[GitHub](https://www.github.com)** account.\n2. Verify your Github account. (Check your email, they should have sent you a verification link).\n3. Log in to **[Samantha](http://samantha.fewd.us/)**.\n4. **???**\n5. Profit.\n\n#### Today's Class notes\n---\n\n** [Notes](http://samantha.fewd.us/#fork/mottaquikarim/SI_Week2_JS_Notes) ** | ** [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/SI_Week2_JS_Notes)**\n\n\n\n\n\n\n\n","idx":3},"warmup":{"content":"# Warmup\n---\n\nLet's begin with some review and practice.\n\n#### ** [Notes](http://samantha.fewd.us/#fork/mottaquikarim/SI_Week2_JS_Notes) ** | ** [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/SI_Week2_JS_Notes)**\n<p></p>\n\n#### Review\n---\n\nWithout using your computer, evaluate the following. Assume that each problem block is a new environment (**in other words**: these problems are not related in any way).\n\n** Problem 1 **\n\n```js\nvar a = 1;\nvar b = 2;\nconsole.log( c );\n```\n\n** Problem 2 **\n\n```js\nc = 3;\nconsole.log( c );\nvar c = 4;\nconsole.log( c );\n```\n\n** Problem 3 **\n\n```js\nconst a = 1;\nconsole.log( a );\n```\n\n** Problem 4 **\n\n```js\nlet b = 1;\nconsole.log( b );\n```\n\n** Problem 5 **\n\n```js\nconst a = 1;\na = 2;\nconsole.log( a );\n```\n\n** Problem 6 **\n\n```js\nlet a = 1;\na = 2;\nconsole.log( a );\n```\n\n** Problem 7 **\n\n```js\nconst a = 1;\nconsole.log( typeof a );\n```\n\n** Problem 8 **\n\n```js\nconsole.log( typeof c );\n```\n\n** Problem 9 **\n\n```js\nconst a = \"Hello, Wrold\";\nconsole.log( typeof a );\n```\n\n** Problem 10 **\n\n```js\nconst a = true;\nconsole.log( typeof a );\n```\n\n#### Practice\n---\n\nComplete the following problems in Samantha. \n\n#### [Basic Vars PSET](http://samantha.fewd.us/#fork/mottaquikarim/Basic_Vars_Review) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/Basic_Vars_Review)\nPlease complete all the prompts.\n\n#### [Arrays PSET](http://samantha.fewd.us/#fork/mottaquikarim/Arrays_PSET) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/Arrays_PSET)\nSolve problems 1 - 5.\n\n#### Create a SuperHero object\nCreate an object called **`SuperHero`**. It should have the following properties:\n\n1. **name**: string. Super hero name\n2. **alterEgo**: string. Super hero's alter ego's name\n3. **superPwer**: string. Super hero's ability\n4. **age**: number. Super hero's age.\n5. **isVillian**: boolean. Is super hero a villain? ","idx":4},"functions":{"content":"# Functions\n---\n\nFunctions are essentially actions. We use functions to save a set of **`instructions`** that we can tell javascript to use over and over again. Functions have names, just like variables, but they hold more than just primitive values.\n\n#### ** [Notes](http://samantha.fewd.us/#fork/mottaquikarim/SI_Week2_JS_Notes) ** | ** [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/SI_Week2_JS_Notes)**\n<p></p>\n\n#### Learning Objectives\n---\n1. Understand how to use functions to abstract away common coding tasks\n2. Understand the meaning of parameters, scope, and the return statement.\n\n#### Exercises\n---\nThe following PSET contains 10 problems. \n#### [PSET - Functions](http://samantha.fewd.us/#fork/mottaquikarim/Functions_Practice) | [LIVE Instructor Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/Functions_Practice)\nWe will attempt to solve some or MOST of them.\n\n#### Example\n---\n\nThis is a function declaration.\n\n```javascript\nfunction doSomething() {\n\talert('doing something!');\n}\n```\n\nHere is how we would call that function\n```javascript\n// copying over last code snippet for convenience\nfunction doSomething() {\n\talert('doing something!');\n}\n\n// calling it now\ndoSomething();\n```\n\n#### Alternate way to do this\n\n```javascript\nvar doSomething = function() {\n\talert('doing something!');\n}\n\n// call it\ndoSomething();\n```\n\n### The point of it all\n---\n\nGreat, we can declare functions. But **what's the point** anyways?\n\nCheck out this example.\n\n```js\n// generate a random number\n// within range [s,e]\nfunction generateRandomInRang(s,e) {\n    return s + Math.floor( Math.random() * (e-s+1) );\n}\n\n// get random number between 1 and 3\nconst rando = generateRandomInRang(1,3); \n```\n\nThe idea here is this: **functions** allow us to break up a complex problem into smaller bits. We can solve a problem **once** then forget **how** we solved it, so long as we can **call** the function that deals with solving that problem.\n\nIn other words, after having written that function above, we **never** have to worry about **how** one would generate a random number - we just call our function and trust that it will do that work for us.\n\nNow let's dive into the specifics of how functions actually work (and clear up some of the syntax seen in the above example).\n\n#### Parameters\n---\n\nParameters are initial values that we can send to a function. If we were to think of functions are **recipes**, then **parameters** would be the ingredients needed.\n\n```js\nfunction addTwoNumbers(a,b) {\n    // without a, b the next line \n    // would be useless\n    const sum = a + b;\n}\n\n// call it\naddTwoNumbers(1,2); // sum will be 3\naddTwoNumbers(1,9); // sum will be 10\n```\n\n#### Scope\n---\n\nLet's go back to the example above. How can we actually do something useful with the function we wrote?\n\nConsider the following:\n\n```js\nfunction addTwoNumbers(a,b) {\n    // without a, b the next line \n    // would be useless\n    const sum = a + b;\n}\n\n// let's call the function\naddTwoNumbers(1,2);\n// now, let's use the `sum` variable\n// to our advantage here\n\nconsole.log( 'The sum is: ', sum );\n// TASK: run this code snippet\n// what do you see in the console?\n```\n\n**Issue**: our variable, **`sum`**, is not accessible outside of the function!\n\nThis actually is a **good** thing. Suppose we wanted to create another, more complex function, like so:\n\n```js\n// don't worry about exactly how \n// this works for now\nfunction addAllNumbers( ...numsToAdd ) {\n    let sum = 0;\n    // this is a loop\n    for( let i = 0; i < numsToAdd.length; i++ ) {\n        sum += i;\n    }\n}\n\n// we know how this one works though\nfunction addTwoNumbers(a,b) {\n    // without a, b the next line \n    // would be useless\n    const sum = a + b;\n}\n\naddAllNumbers(1,2,3,4,5);\naddAllNumbers(1,2,3,4,5,6);\n\naddTwoNumbers(1,2);\n```\n\nWhat's useful here is that we can call **BOTH** functions freely without worrying about the `sum` variable being overwritten!\n\n#### BUT...\n---\n\n...how do we actually do anything **useful** with the computations we define in our functions?\n\n#### HINT: Returns!\n<p></p>\nConsider the following:\n\n```js\nfunction addTwoNumbers(a,b) {\n    // without a, b the next line \n    // would be useless\n    const sum = a + b;\n}\n\n// right now, we can call the above\naddTwoNumbers(1,2);\n// but we cannot access the sum\n// variable...\n\n```\n\nNow, let's tweak the above a bit.\n\n```js\n// let's tweak the above function\nfunction addTwoNumbersImproved(a,b) {\n    const sum = a + b;\n    // we are RETURNING a variable\n    // that we declared in here\n    // thus exposing it to the outside\n    // world\n    return sum;\n}\n\n// now check this\nconst mySum = addTwoNumbersImproved(1,2);\n// here's what's actually happening\n// call addTwoNumbersImproved\n// with a = 1, b = 2\n// run the guts of that function\n// ...\n// (this creates sum and evaluates\n// it to be 3)\n// ...\n// RETURN the sum variable\n// now...\n/*\n    const mySum = 3;\n*/\n// ^^ we have REPLACED\n// addTwoNumbersImproved(1,2)\n// with the VALUE of sum, or 3\n\n// if we console.log mySum...\nconsole.log( mySum ); // 3\n```\n","idx":5},"conditional-statements":{"content":"# Conditional Statements\n---\n\nThe conditional statement is used to write code that is capable of making decisions.\n\n#### ** [Notes](http://samantha.fewd.us/#fork/mottaquikarim/SI_Week2_JS_Notes) ** | ** [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/SI_Week2_JS_Notes)**\n<p></p>\n\n#### Learning Objectives\n---\n1. Understand the concept of boolean expressions\n2. Use boolean expressions to write decision making logic\n\n#### Exercises\n---\n\n#### [Problems 9-16: The Basics](http://samantha.fewd.us/#fork/mottaquikarim/FEWD629_functions_pset_2) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/FEWD629_functions_pset_2)\n**PURPOSE**: somewhat challenging, use of conditionals and random number generators.\n\n<p></p>\n\n#### [Problems 17-24: Conditionals](http://samantha.fewd.us/#fork/mottaquikarim/FEWD629_functions_pset_3) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/FEWD629_functions_pset_3)\n**PURPOSE**: Conditional based problems, ups the level once more\n\n#### Known Operators\n---\n\nWe know quite a few javascript **operators** already.\n\nHere are some examples:\n\n**Addition operator**\n\n```js\nconst sum = 1 + 2;\n```\n\nThe **+** is the operator, **1 + 2** is an expression that gets evaluated.\n\n**Other Operators**\n```js\n// subtraction\nconst diff = 2 - 1;\n// multiplication\nconst prod = 12 * 13;\n// division\nconst quotient = 12 / 6;\n// typeof \nconst type = typeof quotient;\n```\n\nThe above statements are all arithmetic operations, with the exception of the last one. They all evaluate to **numbers**.\n\n#### Logic Operators\n---\n\nThe following operators, the **logic operators**, all evaluate to **booleans**.\n\n** Equality Operator **\n```js\nconst a = 1;\nconst b = 1;\n\n// the === is equality operator\nconst isEqual = ( a === b ); // true\n```\n** Not Equal Operator **\n\n```js\nconst a = 2;\nconst b = 1;\n\n// the !== is NOT equal operator\nconst isNotEqual = ( a !== b ); // true\n```\n\n** Comparison Operators **\n\n```js\nconst a = 1;\nconst b = 2;\n\nconst isGreatThan = ( b > a ); // true\nconst isLessThan = ( a < b ); // true\nconst isGreaterThanOrEqual = ( b >= a);\nconst isLessThanOrEqual = ( a <= b );\n```\n\n** NOT operator **\n\n```js\nconst isItHotToday = true;\n\nconst opposite = !isItHotToday; // false\nconst sameAs = !opposite; // true\n```\n\n** AND operator **\n\nEvaluates to **true** only if ALL operands are true.\n\n```js\nconst f1 = 'Taq';\nconst l1 = 'Karim';\n\n// the && is the AND operator\nconst isInstructor = f1 === 'Taq' && l1 === 'Karim';\n```\n\n** OR operator **\n\nEvaluates to **true** if ANY operands are true.\n\n```js\nconst isItWarm = true;\nconst isItClear = false;\n\n// the || is the OR operator\nconst isItNiceOut = isItWarm || isItClear;\n```\n\n#### Conditionals\n---\n\nThe conditional statements are effectively logic operators that are evaluated and based on result (ie: true or false-ness), certain blocks of code are execture.\n\nConsider:\n\n```js\nconst f1 = 'Taq';\nconst l1 = 'Karim';\n\n// the && is the AND operator\nconst isInstructor = f1 === 'Taq' && l1 === 'Karim';\n\n// IF `isInstrucor` is true, we run\n// the console.log\n// otherwise, we just skip\nif ( isInstructor ) {\n    console.log('Hello, Wrold!'):\n}\n\nconsole.log('this will always run');\n```","idx":6},"loops":{"content":"# Loops\n---\n\nLoops are used to run a specific set of code over and over again.\n\n#### ** [Notes](http://samantha.fewd.us/#fork/mottaquikarim/SI_Week2_JS_Notes) ** | ** [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/SI_Week2_JS_Notes)**\n<p></p>\n\n#### Learning Objectives\n---\n\n1. Understand why loops are useful\n2. Employ loops to solve problems\n\n#### Exercises\n---\n\n#### Why do we need Loops?\n---\n\nConsider the following:\n\n```js\nconst myArray = [1,2,3,4,5];\n```\n\nHow could we find the average of the values of this array?\n\nPerhaps, we could do this:\n\n```js\nconst total = myArray[0] + \n    myArray[1] + \n    myArray[2] + \n    myArray[3] + \n    myArray[4] );\n\nconst mean = total / myArray.length;\n\nconsole.log( total );\nconsole.log( mean );\n```\n\nNow this would work...to an extent.\n\nTwo problems:\n\n1. What if we added another value to the end of **myArray**? This would make the **total** calculation incorrect.\n2. What if **myArray** actually had 100 elements? This would mean having to add **myArray[0]** + **myArray[1]** + ... + **myArray[99]** by hand! \n\nSo...what can we do?\n\nLet's write our total calculation from above a bit differently:\n\n```js\nlet total = 0;\n\ntotal += myArray[0];\ntotal += myArray[1];\ntotal += myArray[2];\ntotal += myArray[3];\ntotal += myArray[4];\n\nconsole.log( total );\n\n```\n\nWhat's nice about this new approach is that we have **one line** of code that looks **super similar**.\n\nThe only issue are the pesky indices, which go from 1 to 2 to 3, etc.\n\nNow, let's add the following:\n\n```js\nlet total = 0;\nlet index = 0;\n\n// index is 0\ntotal += myArray[index];\nindex += 1;\n\n// index is 1\ntotal += myArray[index];\nindex += 1;\n\n// index is 2\ntotal += myArray[index];\nindex += 1;\n\n// index is 3\ntotal += myArray[index];\nindex += 1;\n\n// index is 4\ntotal += myArray[index];\nindex += 1;\n\nconsole.log( total );\n```\n\nThe code above is logically equivalent to what we had before, but now it's a **more generic expression** of adding values from our array into a running total.\n\nPlus, our lines are **exactly** the same, being repeated 5 times. As it turns out, we can automate this a bit, using the **while** loop:\n\n```js\nlet total = 0;\nlet index = 0;\n\n// we want to stop when\n// index === myArray.length\n// since that means we have reached \n// the end of the array\nwhile( index < myArray.length ) {\n    total += myArray[index];\n    index += 1;\n} // this will stop after 5 iterations\n\n// once the while loop has expired, we \n// can continue running this code\nconst mean = total / myArray.length;\n\nconsole.log( total );\nconsole.log( mean );\n```\n\nThe **for** loop is similar to this as well, with a few syntax differences.\n\n```js\n// we have three conditions here\n\n// the START condition\n// let index = 0\n\n// the END condition\n// index < myArray.length\n\n// the UPDATE condition\n// index += 1\n\n// this ensures that the for loop runs\n// for the duration of the array\n// but that it STOPS when it reaches\n// the end of our array\n\nfor( let index = 0; index < myArray.length; index += 1 ) {\n    total += myArray[index];\n}\n// once the for loop has expired, we \n// can continue running this code\nconst mean = total / myArray.length;\n\nconsole.log( total );\nconsole.log( mean );\n```\n\n ","idx":7},"__list__":["home","title","desc","getting-started","warmup","functions","conditional-statements","loops"]}